{
    "id": "digital-postcard-creator",
    "name": "Digital Postcard Creator",
    "icon": "Mail",
    "description": "Create a custom digital postcard with background images, personalized messages, and download functionality. Includes a confetti animation when the postcard is 'sent'.",
    "difficulty": "Beginner",
    "category": "HTML/CSS/JavaScript",
    "steps": [
      {
        "step": 1,
        "title": "Set Up HTML Structure",
        "description": "Create the basic HTML layout with sections for the postcard creator interface and the postcard preview area. Include areas for background selection, text input, styling controls, and action buttons.",
        "code": {
          "file": "index.html",
          "snippet": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Digital Postcard Creator</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <header>\n    <h1>Digital Postcard Creator üì¨</h1>\n    <p>Create and download your own custom digital postcard!</p>\n  </header>\n\n  <main>\n    <div class=\"editor-container\">\n      <div class=\"controls\">\n        <h2>Customize Your Postcard</h2>\n        \n        <div class=\"control-section\">\n          <h3>Choose Background</h3>\n          <div class=\"background-options\">\n            <div class=\"bg-option\" data-bg=\"beach.jpg\">\n              <img src=\"images/beach.jpg\" alt=\"Beach\">\n            </div>\n            <div class=\"bg-option\" data-bg=\"mountains.jpg\">\n              <img src=\"images/mountains.jpg\" alt=\"Mountains\">\n            </div>\n            <div class=\"bg-option\" data-bg=\"sunset.jpg\">\n              <img src=\"images/sunset.jpg\" alt=\"Sunset\">\n            </div>\n            <div class=\"bg-option\" data-bg=\"cityscape.jpg\">\n              <img src=\"images/cityscape.jpg\" alt=\"Cityscape\">\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"control-section\">\n          <h3>Your Message</h3>\n          <textarea id=\"postcard-message\" placeholder=\"Enter your message here...\"></textarea>\n        </div>\n        \n        <div class=\"control-section\">\n          <h3>Text Style</h3>\n          <div class=\"text-controls\">\n            <div class=\"control-group\">\n              <label for=\"text-color\">Color:</label>\n              <input type=\"color\" id=\"text-color\" value=\"#ffffff\">\n            </div>\n            <div class=\"control-group\">\n              <label for=\"font-family\">Font:</label>\n              <select id=\"font-family\">\n                <option value=\"Arial, sans-serif\">Arial</option>\n                <option value=\"'Times New Roman', serif\">Times New Roman</option>\n                <option value=\"'Courier New', monospace\">Courier New</option>\n                <option value=\"'Pacifico', cursive\">Pacifico</option>\n                <option value=\"'Dancing Script', cursive\">Dancing Script</option>\n              </select>\n            </div>\n            <div class=\"control-group\">\n              <label for=\"font-size\">Size:</label>\n              <input type=\"range\" id=\"font-size\" min=\"12\" max=\"32\" value=\"20\">\n              <span id=\"font-size-value\">20px</span>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"action-buttons\">\n          <button id=\"send-button\">Send Postcard</button>\n          <button id=\"download-button\">Download</button>\n        </div>\n      </div>\n      \n      <div class=\"preview\">\n        <h2>Preview</h2>\n        <div id=\"postcard\" class=\"postcard\">\n          <div id=\"postcard-text\" class=\"postcard-text\">Your message will appear here...</div>\n        </div>\n      </div>\n    </div>\n  </main>\n  \n  <div id=\"confetti-container\" class=\"confetti-container\"></div>\n  \n  <footer>\n    <p>Created with ‚ù§Ô∏è | Digital Postcard Creator</p>\n  </footer>\n\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n  <script src=\"script.js\"></script>\n</body>\n</html>"
        }
      },
      {
        "step": 2,
        "title": "Create Basic CSS Styling",
        "description": "Style the application with responsive layout, attractive controls, and a realistic postcard preview that matches standard postcard dimensions.",
        "code": {
          "file": "styles.css",
          "snippet": "/* Base Styles */\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: Arial, sans-serif;\n  line-height: 1.6;\n  color: #333;\n  background-color: #f4f4f4;\n  padding: 20px;\n}\n\nheader {\n  text-align: center;\n  margin-bottom: 30px;\n}\n\nh1 {\n  color: #2c3e50;\n  margin-bottom: 10px;\n}\n\nh2 {\n  margin-bottom: 15px;\n  color: #2c3e50;\n}\n\nh3 {\n  font-size: 1.1rem;\n  margin-bottom: 10px;\n  color: #2c3e50;\n}\n\n/* Layout */\nmain {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.editor-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.controls {\n  flex: 1;\n  min-width: 300px;\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.preview {\n  flex: 1;\n  min-width: 300px;\n  padding: 20px;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n/* Control Sections */\n.control-section {\n  margin-bottom: 25px;\n  border-bottom: 1px solid #eee;\n  padding-bottom: 20px;\n}\n\n.control-section:last-child {\n  border-bottom: none;\n}\n\n/* Background Options */\n.background-options {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\n  gap: 10px;\n}\n\n.bg-option {\n  cursor: pointer;\n  border: 2px solid transparent;\n  border-radius: 4px;\n  overflow: hidden;\n  transition: all 0.2s ease;\n}\n\n.bg-option img {\n  width: 100%;\n  height: 80px;\n  object-fit: cover;\n  display: block;\n}\n\n.bg-option.selected {\n  border-color: #3498db;\n  box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.3);\n}\n\n/* Form Controls */\ntextarea {\n  width: 100%;\n  min-height: 100px;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  resize: vertical;\n  font-family: inherit;\n  margin-bottom: 10px;\n}\n\n.text-controls {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.control-group {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.control-group label {\n  min-width: 60px;\n  font-weight: bold;\n}\n\n.control-group input,\n.control-group select {\n  flex-grow: 1;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.control-group input[type=\"color\"] {\n  height: 35px;\n  padding: 2px;\n}\n\n/* Action Buttons */\n.action-buttons {\n  display: flex;\n  gap: 10px;\n  margin-top: 20px;\n}\n\nbutton {\n  padding: 10px 20px;\n  background-color: #3498db;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: bold;\n  transition: background-color 0.2s ease;\n}\n\nbutton:hover {\n  background-color: #2980b9;\n}\n\n#download-button {\n  background-color: #2ecc71;\n}\n\n#download-button:hover {\n  background-color: #27ae60;\n}\n\n/* Postcard Preview */\n.postcard {\n  width: 400px;\n  height: 280px; /* 10:7 ratio like traditional postcards */\n  background-color: #f8f8f8;\n  background-image: url('images/beach.jpg');\n  background-size: cover;\n  background-position: center;\n  border-radius: 8px;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n  position: relative;\n  overflow: hidden;\n}\n\n.postcard-text {\n  position: absolute;\n  bottom: 20px;\n  left: 20px;\n  right: 20px;\n  color: white;\n  text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.7);\n  font-size: 20px;\n  font-family: Arial, sans-serif;\n  max-height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  background-color: rgba(0, 0, 0, 0.3);\n  border-radius: 4px;\n}\n\n/* Confetti Container */\n.confetti-container {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 1000;\n  display: none;\n}\n\n/* Footer */\nfooter {\n  text-align: center;\n  margin-top: 20px;\n  padding: 10px;\n  color: #7f8c8d;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .editor-container {\n    flex-direction: column;\n  }\n  \n  .postcard {\n    width: 320px;\n    height: 224px;\n  }\n}\n\n/* For the confetti animation */\n.confetti {\n  position: absolute;\n  width: 10px;\n  height: 10px;\n  opacity: 0;\n  transform: translateY(0) rotate(0);\n  pointer-events: none;\n  animation: fall 3s ease-in-out forwards;\n}\n\n@keyframes fall {\n  0% {\n    opacity: 1;\n    transform: translateY(0) rotate(0);\n  }\n  100% {\n    opacity: 0;\n    transform: translateY(100vh) rotate(360deg);\n  }\n}"
        }
      },
      {
        "step": 3,
        "title": "Create Image Folder Structure",
        "description": "Set up a folder to store the background images for the postcard. You'll need to create an 'images' folder and add at least four background options: beach.jpg, mountains.jpg, sunset.jpg, and cityscape.jpg.",
        "code": {
          "file": "folder-structure.txt",
          "snippet": "project-folder/\n‚îú‚îÄ‚îÄ index.html\n‚îú‚îÄ‚îÄ styles.css\n‚îú‚îÄ‚îÄ script.js\n‚îî‚îÄ‚îÄ images/\n    ‚îú‚îÄ‚îÄ beach.jpg\n    ‚îú‚îÄ‚îÄ mountains.jpg\n    ‚îú‚îÄ‚îÄ sunset.jpg\n    ‚îî‚îÄ‚îÄ cityscape.jpg"
        }
      },
      {
        "step": 4,
        "title": "Implement Background Selection",
        "description": "Add JavaScript functionality to allow users to select different backgrounds for their postcard, updating the preview in real-time.",
        "code": {
          "file": "script.js",
          "snippet": "// DOM Elements\nconst bgOptions = document.querySelectorAll('.bg-option');\nconst postcardElement = document.getElementById('postcard');\nconst messageInput = document.getElementById('postcard-message');\nconst postcardText = document.getElementById('postcard-text');\nconst textColor = document.getElementById('text-color');\nconst fontFamily = document.getElementById('font-family');\nconst fontSize = document.getElementById('font-size');\nconst fontSizeValue = document.getElementById('font-size-value');\nconst sendButton = document.getElementById('send-button');\nconst downloadButton = document.getElementById('download-button');\nconst confettiContainer = document.getElementById('confetti-container');\n\n// Initial selected background (beach)\nlet selectedBackground = 'beach.jpg';\n\n// Background selection\nbgOptions.forEach(option => {\n  option.addEventListener('click', () => {\n    // Remove selected class from all options\n    bgOptions.forEach(opt => opt.classList.remove('selected'));\n    \n    // Add selected class to clicked option\n    option.classList.add('selected');\n    \n    // Get the background image filename\n    selectedBackground = option.getAttribute('data-bg');\n    \n    // Update the postcard background\n    updatePostcardBackground();\n  });\n});\n\n// Set initial selected background\nbgOptions[0].classList.add('selected');\n\n// Update the postcard background image\nfunction updatePostcardBackground() {\n  postcardElement.style.backgroundImage = `url('images/${selectedBackground}')`;\n}\n\n// Initialize with default background\nupdatePostcardBackground();"
        }
      },
      {
        "step": 5,
        "title": "Add Message and Text Styling",
        "description": "Implement functionality to update the postcard with the user's message text and apply styling changes (color, font, size) in real-time.",
        "code": {
          "file": "script.js",
          "snippet": "// Message input functionality\nmessageInput.addEventListener('input', updatePostcardMessage);\n\n// Text styling events\ntextColor.addEventListener('input', updateTextStyle);\nfontFamily.addEventListener('change', updateTextStyle);\nfontSize.addEventListener('input', updateTextStyle);\n\n// Update the message on the postcard\nfunction updatePostcardMessage() {\n  const message = messageInput.value.trim() || 'Your message will appear here...';\n  postcardText.textContent = message;\n}\n\n// Update text styling\nfunction updateTextStyle() {\n  // Update font size display value\n  fontSizeValue.textContent = `${fontSize.value}px`;\n  \n  // Apply styles to postcard text\n  postcardText.style.color = textColor.value;\n  postcardText.style.fontFamily = fontFamily.value;\n  postcardText.style.fontSize = `${fontSize.value}px`;\n}\n\n// Initialize with default text styles\nupdateTextStyle();"
        }
      },
      {
        "step": 6,
        "title": "Create Confetti Animation",
        "description": "Add a festive confetti animation that appears when the user clicks the 'Send Postcard' button.",
        "code": {
          "file": "script.js",
          "snippet": "// Send button with confetti animation\nsendButton.addEventListener('click', () => {\n  createConfetti();\n  \n  // Show a sent message\n  alert('Your postcard has been sent! üéâ');\n});\n\n// Create confetti animation\nfunction createConfetti() {\n  // Clear any existing confetti\n  confettiContainer.innerHTML = '';\n  confettiContainer.style.display = 'block';\n  \n  // Generate random number of confetti pieces (between 50 and 100)\n  const confettiCount = Math.floor(Math.random() * 51) + 50;\n  \n  // Colors for confetti\n  const colors = [\n    '#f44336', '#e91e63', '#9c27b0', '#673ab7', \n    '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4',\n    '#009688', '#4caf50', '#8bc34a', '#cddc39', \n    '#ffeb3b', '#ffc107', '#ff9800', '#ff5722'\n  ];\n  \n  // Create the confetti pieces\n  for (let i = 0; i < confettiCount; i++) {\n    const confetti = document.createElement('div');\n    confetti.className = 'confetti';\n    \n    // Random position\n    const startPositionLeft = Math.random() * 100;\n    \n    // Random color\n    const color = colors[Math.floor(Math.random() * colors.length)];\n    \n    // Random rotation speed\n    const rotationSpeed = Math.random() * 360;\n    \n    // Random size\n    const size = Math.floor(Math.random() * 10) + 5;\n    \n    // Random animation delay\n    const delay = Math.random() * 2;\n    \n    // Apply styles\n    confetti.style.backgroundColor = color;\n    confetti.style.left = `${startPositionLeft}%`;\n    confetti.style.width = `${size}px`;\n    confetti.style.height = `${size}px`;\n    confetti.style.animationDelay = `${delay}s`;\n    confetti.style.animationDuration = `${3 + Math.random() * 2}s`; // Between 3-5s\n    \n    // Add to container\n    confettiContainer.appendChild(confetti);\n  }\n  \n  // Remove confetti after animation is complete\n  setTimeout(() => {\n    confettiContainer.style.display = 'none';\n  }, 5000);\n}"
        }
      },
      {
        "step": 7,
        "title": "Implement Postcard Download Functionality",
        "description": "Use the html2canvas library to capture the postcard as an image and allow users to download it.",
        "code": {
          "file": "script.js",
          "snippet": "// Download button functionality\ndownloadButton.addEventListener('click', () => {\n  // Check if a message has been entered\n  if (messageInput.value.trim() === '') {\n    alert('Please enter a message for your postcard before downloading.');\n    return;\n  }\n  \n  // Use html2canvas to convert the postcard to an image\n  html2canvas(postcardElement).then(canvas => {\n    // Create an image data URL\n    const imageData = canvas.toDataURL('image/png');\n    \n    // Create a temporary link element\n    const link = document.createElement('a');\n    link.href = imageData;\n    link.download = 'my-digital-postcard.png';\n    \n    // Trigger download\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }).catch(error => {\n    console.error('Error generating postcard image:', error);\n    alert('Sorry, there was an error creating your postcard image. Please try again.');\n  });\n});\n\n// Initialize the postcard with default values\nupdatePostcardBackground();\nupdatePostcardMessage();\nupdateTextStyle();\n\n// Add selected class to the first background option by default\nbgOptions[0].classList.add('selected');"
        }
      },
      {
        "step": 8,
        "title": "Complete and Test Your Application",
        "description": "Combine all code, test each feature, and fix any issues. Make sure all functions work correctly: background selection, message customization, styling, confetti animation, and download functionality.",
        "code": {
          "file": "final-script.js",
          "snippet": "// DOM Elements\nconst bgOptions = document.querySelectorAll('.bg-option');\nconst postcardElement = document.getElementById('postcard');\nconst messageInput = document.getElementById('postcard-message');\nconst postcardText = document.getElementById('postcard-text');\nconst textColor = document.getElementById('text-color');\nconst fontFamily = document.getElementById('font-family');\nconst fontSize = document.getElementById('font-size');\nconst fontSizeValue = document.getElementById('font-size-value');\nconst sendButton = document.getElementById('send-button');\nconst downloadButton = document.getElementById('download-button');\nconst confettiContainer = document.getElementById('confetti-container');\n\n// Initial selected background (beach)\nlet selectedBackground = 'beach.jpg';\n\n// Background selection\nbgOptions.forEach(option => {\n  option.addEventListener('click', () => {\n    // Remove selected class from all options\n    bgOptions.forEach(opt => opt.classList.remove('selected'));\n    \n    // Add selected class to clicked option\n    option.classList.add('selected');\n    \n    // Get the background image filename\n    selectedBackground = option.getAttribute('data-bg');\n    \n    // Update the postcard background\n    updatePostcardBackground();\n  });\n});\n\n// Set initial selected background\nbgOptions[0].classList.add('selected');\n\n// Message input functionality\nmessageInput.addEventListener('input', updatePostcardMessage);\n\n// Text styling events\ntextColor.addEventListener('input', updateTextStyle);\nfontFamily.addEventListener('change', updateTextStyle);\nfontSize.addEventListener('input', updateTextStyle);\n\n// Send button with confetti animation\nsendButton.addEventListener('click', () => {\n  createConfetti();\n  \n  // Show a sent message\n  alert('Your postcard has been sent! üéâ');\n});\n\n// Download button functionality\ndownloadButton.addEventListener('click', () => {\n  // Check if a message has been entered\n  if (messageInput.value.trim() === '') {\n    alert('Please enter a message for your postcard before downloading.');\n    return;\n  }\n  \n  // Use html2canvas to convert the postcard to an image\n  html2canvas(postcardElement).then(canvas => {\n    // Create an image data URL\n    const imageData = canvas.toDataURL('image/png');\n    \n    // Create a temporary link element\n    const link = document.createElement('a');\n    link.href = imageData;\n    link.download = 'my-digital-postcard.png';\n    \n    // Trigger download\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }).catch(error => {\n    console.error('Error generating postcard image:', error);\n    alert('Sorry, there was an error creating your postcard image. Please try again.');\n  });\n});\n\n// Update the postcard background image\nfunction updatePostcardBackground() {\n  postcardElement.style.backgroundImage = `url('images/${selectedBackground}')`;\n}\n\n// Update the message on the postcard\nfunction updatePostcardMessage() {\n  const message = messageInput.value.trim() || 'Your message will appear here...';\n  postcardText.textContent = message;\n}\n\n// Update text styling\nfunction updateTextStyle() {\n  // Update font size display value\n  fontSizeValue.textContent = `${fontSize.value}px`;\n  \n  // Apply styles to postcard text\n  postcardText.style.color = textColor.value;\n  postcardText.style.fontFamily = fontFamily.value;\n  postcardText.style.fontSize = `${fontSize.value}px`;\n}\n\n// Create confetti animation\nfunction createConfetti() {\n  // Clear any existing confetti\n  confettiContainer.innerHTML = '';\n  confettiContainer.style.display = 'block';\n  \n  // Generate random number of confetti pieces (between 50 and 100)\n  const confettiCount = Math.floor(Math.random() * 51) + 50;\n  \n  // Colors for confetti\n  const colors = [\n    '#f44336', '#e91e63', '#9c27b0', '#673ab7', \n    '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4',\n    '#009688', '#4caf50', '#8bc34a', '#cddc39', \n    '#ffeb3b', '#ffc107', '#ff9800', '#ff5722'\n  ];\n  \n  // Create the confetti pieces\n  for (let i = 0; i < confettiCount; i++) {\n    const confetti = document.createElement('div');\n    confetti.className = 'confetti';\n    \n    // Random position\n    const startPositionLeft = Math.random() * 100;\n    \n    // Random color\n    const color = colors[Math.floor(Math.random() * colors.length)];\n    \n    // Random size\n    const size = Math.floor(Math.random() * 10) + 5;\n    \n    // Random animation delay\n    const delay = Math.random() * 2;\n    \n    // Apply styles\n    confetti.style.backgroundColor = color;\n    confetti.style.left = `${startPositionLeft}%`;\n    confetti.style.width = `${size}px`;\n    confetti.style.height = `${size}px`;\n    confetti.style.animationDelay = `${delay}s`;\n    confetti.style.animationDuration = `${3 + Math.random() * 2}s`; // Between 3-5s\n    \n    // Add to container\n    confettiContainer.appendChild(confetti);\n  }\n  \n  // Remove confetti after animation is complete\n  setTimeout(() => {\n    confettiContainer.style.display = 'none';\n  }, 5000);\n}\n\n// Initialize the postcard with default values\nupdatePostcardBackground();\nupdatePostcardMessage();\nupdateTextStyle();"
        }
      },
      {
        "step": 9,
        "title": "Add Enhancements and Personal Touches",
        "description": "Enhance your project with additional features like postcard borders, stamps, or custom filters to make it more engaging and personalized.",
        "code": {
          "file": "enhancements.js",
          "snippet": "// Add these functions to your script.js file\n\n// 1. Create a toggle for postcard borders\nconst borderToggle = document.createElement('div');\nborderToggle.innerHTML = `\n  <div class=\"control-section\">\n    <h3>Border Style</h3>\n    <div class=\"control-group\">\n      <label for=\"border-toggle\">Add Border:</label>\n      <input type=\"checkbox\" id=\"border-toggle\">\n    </div>\n    <div class=\"control-group\">\n      <label for=\"border-color\">Border Color:</label>\n      <input type=\"color\" id=\"border-color\" value=\"#ffffff\">\n    </div>\n  </div>\n`;\n\n// Insert border toggle before action buttons\ndocument.querySelector('.action-buttons').before(borderToggle);\n\n// Get new DOM elements\nconst borderToggleInput = document.getElementById('border-toggle');\nconst borderColorInput = document.getElementById('border-color');\n\n// Event listeners for border controls\nborderToggleInput.addEventListener('change', updateBorder);\nborderColorInput.addEventListener('input', updateBorder);\n\n// Update border function\nfunction updateBorder() {\n  if (borderToggleInput.checked) {\n    postcardElement.style.border = `10px solid ${borderColorInput.value}`;\n  } else {\n    postcardElement.style.border = 'none';\n  }\n}\n\n// 2. Add a vintage filter toggle\nconst filterToggle = document.createElement('div');\nfilterToggle.innerHTML = `\n  <div class=\"control-section\">\n    <h3>Image Filter</h3>\n    <div class=\"control-group\">\n      <label for=\"filter-select\">Filter:</label>\n      <select id=\"filter-select\">\n        <option value=\"none\">None</option>\n        <option value=\"sepia\">Vintage</option>\n        <option value=\"grayscale\">Black & White</option>\n        <option value=\"brightness\">Bright</option>\n        <option value=\"contrast\">High Contrast</option>\n      </select>\n    </div>\n  </div>\n`;\n\n// Insert filter toggle after background options\ndocument.querySelector('.background-options').parentNode.after(filterToggle);\n\n// Get filter select element\nconst filterSelect = document.getElementById('filter-select');\n\n// Event listener for filter\nfilterSelect.addEventListener('change', updateFilter);\n\n// Update filter function\nfunction updateFilter() {\n  const filter = filterSelect.value;\n  \n  // Reset all filters\n  postcardElement.style.filter = 'none';\n  \n  // Apply selected filter\n  switch (filter) {\n    case 'sepia':\n      postcardElement.style.filter = 'sepia(0.7)';\n      break;\n    case 'grayscale':\n      postcardElement.style.filter = 'grayscale(1)';\n      break;\n    case 'brightness':\n      postcardElement.style.filter = 'brightness(1.3)';\n      break;\n    case 'contrast':\n      postcardElement.style.filter = 'contrast(1.5)';\n      break;\n  }\n}\n\n// 3. Add decorative stamp option\nconst stampOption = document.createElement('div');\nstampOption.innerHTML = `\n  <div class=\"control-section\">\n    <h3>Add Stamp</h3>\n    <div class=\"stamp-options\">\n      <button class=\"stamp-btn\" data-stamp=\"stamp1\">‚úàÔ∏è</button>\n      <button class=\"stamp-btn\" data-stamp=\"stamp2\">üåç</button>\n      <button class=\"stamp-btn\" data-stamp=\"stamp3\">üíå</button>\n      <button class=\"stamp-btn\" data-stamp=\"stamp4\">üèôÔ∏è</button>\n      <button class=\"stamp-btn\" data-stamp=\"none\">None</button>\n    </div>\n  </div>\n`;\n\n// Insert stamp option before action buttons\ndocument.querySelector('.action-buttons').before(stampOption);\n\n// Add styles for stamps\nconst stampStyles = document.createElement('style');\nstampStyles.textContent = `\n  .stamp-options {\n    display: flex;\n    gap: 10px;\n    margin-top: 10px;\n  }\n  \n  .stamp-btn {\n    font-size: 24px;\n    width: 50px;\n    height: 50px;\n    padding: 5px;\n    background-color: #f8f8f8;\n    color: #333;\n  }\n  \n  .stamp {\n    position: absolute;\n    top: 20px;\n    right: 20px;\n    font-size: 40px;\n    transform: rotate(15deg);\n    filter: drop-shadow(2px 2px 2px rgba(0,0,0,0.3));\n  }\n`;\ndocument.head.appendChild(stampStyles);\n\n// Stamp buttons event listeners\ndocument.querySelectorAll('.stamp-btn').forEach(btn => {\n  btn.addEventListener('click', () => {\n    // Remove existing stamp if any\n    const existingStamp = postcardElement.querySelector('.stamp');\n    if (existingStamp) {\n      existingStamp.remove();\n    }\n    \n    // Add new stamp if not 'none'\n    const stampType = btn.getAttribute('data-stamp');\n    if (stampType !== 'none') {\n      const stamp = document.createElement('div');\n      stamp.className = 'stamp';\n      \n      // Set emoji based on stamp type\n      switch (stampType) {\n        case 'stamp1':\n          stamp.textContent = '‚úàÔ∏è';\n          break;\n        case 'stamp2':\n          stamp.textContent = 'üåç';\n          break;\n        case 'stamp3':\n          stamp.textContent = 'üíå';\n          break;\n        case 'stamp4':\n          stamp.textContent = 'üèôÔ∏è';\n          break;\n      }\n      \n      postcardElement.appendChild(stamp);\n    }\n  });\n});"
    }}
        ]}